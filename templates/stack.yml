AWSTemplateFormatVersion: "2010-09-09"
Description: "Todobackend Stack"

# Stack Parameters
Parameters:
  VpcId: 
    Type: "AWS::EC2::VPC::Id"
    Description: "The target VPC Id"
  SubnetId:
    Type: "AWS::EC2::Subnet::Id"
    Description: "The target Subnet Id in Availability Zone a"
  KeyPair:
    Type: "String"
    Description: "The key pair that is allowed SSH access"
  InstanceCount:
    Type: "Number"
    Description: "The desired number of application instances"
  DbSubnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: "The target DB Subnet Group subnet Ids"
  DbAvailabilityZone:
    Type: "String"
    Description: "The target availability zone for the database instance"
  DbUsername:
    Type: "String"
    Description: "The RDS database username"
  DbPassword:
    Type: "String"
    Description: "The RDS database password"
    NoEcho: "true"

# Stack Resources
Resources:
  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier: [ { "Ref": "SubnetId" } ]
      LaunchConfigurationName: { "Ref": "AutoScalingLaunchConfiguration" }
      MinSize: 0
      MaxSize: 2
      DesiredCapacity: { "Ref": "InstanceCount" }
      Tags:
        - Key: "Name"
          Value: { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-instance" ] ] }
          PropagateAtLaunch: "true"
  AutoScalingLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: ami-bb473cdb
      InstanceType: t2.micro
      KeyName: { "Ref": "KeyPair" }
      IamInstanceProfile: { "Ref": "EC2InstanceProfile" }
      SecurityGroups:
        - { "Ref": "EC2InstanceSecurityGroup" }
      UserData: {
        "Fn::Base64": { "Fn::Join": ["", [
          "#!/bin/bash\n",
          "echo ECS_CLUSTER=", { "Ref" : "EcsCluster" }, " >> /etc/ecs/ecs.config\n"
        ] ] }
      }
  EC2InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: "todobackend-sg"
      VpcId: { "Ref": "VpcId" }
      SecurityGroupIngress: 
        - IpProtocol: "tcp"
          FromPort: "9000"
          ToPort: "9000"
          SourceSecurityGroupId: { "Ref": "ElbSecurityGroup" }
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
      Tags: 
        - Key: "Name"
          Value: { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-instance-sg" ] ] }
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: [ { "Ref": "EC2InstanceRole" } ]
  EC2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": { "Service": [ "ec2.amazonaws.com" ] },
            "Action": [ "sts:AssumeRole" ]
          }
        ]
      }
      Path: "/"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"     
  DbInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBSubnetGroupName: { "Ref": "DbSubnetGroup" }
      MultiAZ: "false"
      AvailabilityZone: { "Ref": "DbAvailabilityZone" }
      AllocatedStorage: 8
      StorageType: "gp2"
      DBInstanceClass: "db.t2.micro"
      DBName: "todos"
      Engine: "postgres"
      EngineVersion: "9.5.2"
      MasterUsername: { "Ref": "DbUsername" }
      MasterUserPassword: { "Ref": "DbPassword" }
      VPCSecurityGroups:
        - { "Ref": "DbSecurityGroup" }
      Tags:
        - Key: "Name"
          Value: { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-db" ] ] }
  DbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: "Todobackend DB Security Group"
      VpcId: { "Ref": "VpcId"}
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "5432"
          ToPort: "5432"
          SourceSecurityGroupId: { "Ref": "EC2InstanceSecurityGroup" }        
  DbSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Todobackend DB Subnet Group"
      SubnetIds: { "Ref": "DbSubnets" }
      Tags: 
        - Key: "Name"
          Value: { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-db-subnet-group" ] ] }
  ElasticLoadBalancer:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      CrossZone: "false"
      SecurityGroups: [ { "Ref": "ElbSecurityGroup" } ]
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "9000"
          Protocol: "http"
      HealthCheck: 
        Target: "HTTP:9000/todos"
        HealthyThreshold: "2"
        UnhealthyThreshold: "2"
        Interval: "30"
        Timeout: "5"
      Subnets: [ { "Ref": "SubnetId" } ]
      Tags: 
        - Key: "Name"
          Value: { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-elb" ] ] }
  ElbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Todobackend ELB Security Group"
      VpcId: { "Ref": "VpcId" }
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
      Tags: 
        - Key: "Name"
          Value: { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-elb-sg" ] ] }
  EcsCluster:
    Type: "AWS::ECS::Cluster"
  TodobackendTaskDefinition: 
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Name: app
          Image: jkuoctanner/todobackend-play
          Memory: 500
          PortMappings:
            - ContainerPort: "9000"
              HostPort: "9000"
          Environment:
            - Name: APPLICATION_SECRET
              Value: WKNd<w6cujIMRr;/vFNJY0grfI6w2tUX7rZj>0L6t9kF4vl1^xX;QZkbAZH]T^D9
            - Name: POSTGRES_HOST
              Value: { "Fn::GetAtt": ["DbInstance", "Endpoint.Address"] }
            - Name: POSTGRES_USER
              Value: { "Ref": "DbUsername" }
            - Name: POSTGRES_PASSWORD
              Value: { "Ref": "DbPassword" }
            - Name: POSTGRES_DB
              Value: todos
  TodobackendService:
    Type: "AWS::ECS::Service"
    Properties:
      TaskDefinition: { "Ref": "TodobackendTaskDefinition" }
      Cluster: { "Ref": "EcsCluster" }
      LoadBalancers:
        - ContainerName: "app"
          ContainerPort: "9000"
          LoadBalancerName: { "Ref": "ElasticLoadBalancer" }
      Role: { "Ref": "EcsServiceRole" }
      DesiredCount: 0
  EcsServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ecs.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          }
        ]
      }
      Path: "/"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

# Stack Outputs
Outputs:
  ElbDomainName: 
    Description: "Public DNS name of Elastic Load Balancer"
    Value: { "Fn::GetAtt": [ "ElasticLoadBalancer", "DNSName" ] }
  EcsCluster:
    Description: "Amazon Resource Name (ARN) of Todobackend Ecs Cluster"
    Value: { "Ref": "EcsCluster" }
  TodobackendTaskDefinition:
    Description: "Amazon Resource Name (ARN) of Todobackend Task Definition"
    Value: { "Ref": "TodobackendTaskDefinition" }
  TodobackendService: 
    Description: "Amazon Resource Name (ARN) of Todobackend Service"
    Value: { "Ref": "TodobackendService" }
